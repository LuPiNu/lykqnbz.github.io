---
layout:     post
title:      "响应式设计的基础知识"
subtitle:   "做一个魔王扎克"
date:       2017-08-07 09:32:15
author:     "AXiang"
header-img: "img/post-bg-git.jpg"
catalog:  true
tags:
    - 前端
    - 响应式设计
---
> “可能是要成为海贼王的网页”

## 前言

早在2014年，手机网民规模超越传统PC网民规模，手机成为访问互联网最常见的终端。那如何在不同大小设备上呈现同样的网页呢，如今做一
个单纯的页面仔也不容易。

---

## 正文

响应式设计，理念是设计和开发应根据屏幕的大小、平台的用户的行为和环境基础上自动调整；它应该有一个灵活的网格和布局，图像和CSS能够智能的组合使用。比如说用户从电脑切换到ipad，网站能够自动切换以适应分辨率，图像大小和脚本。换句话说，网站应该具备根据用户的使用环境来自动调整，这可以减少不必要的重复设计。

现在主要有两种响应式的设计理念，一种是bootstray这样的框架，主要通媒体查询器media来控制。但其默认的尺寸单位是px和pt。所以使用这种框架后，页面只是在某一个范围内进行相应的变化。这样会导致一个问题：页面很容易垮塌，比例失调。第二种是用上CSS3中的rem作为尺寸单位，单独使用或者是配合bootstray使用。rem是相对于根元素字体大小的单位，是一种相对单位和em类似，em根据父级元素改变而rem根据根元素。

#### 参考资料

- [移动前端开发之viewport的深入理解](http://mp.weixin.qq.com/s?__biz=MzA5NTM2MTEzNw==&mid=388124021&idx=1&sn=175ee9b47b17dde0f30f6c42130ed5e2&scene=2&srcid=10014LSu0sE98eaP14RHzaMw&from=timeline&isappinstalled=0#rd)
- ...


#### 万恶的分辨率

不同的设备都有各自的屏幕分辨率和清晰度，从当初Nokia的240×320像素2.0英寸手机，到如今SAMSUNG的2960x1440像素5.8英寸手机，期间也仅仅过了不到10年。如今很多PC的分辨率也不及2960x1440像素，那通过媒体查询器来控制的响应式设计是不是就实现不了呢。其实并不是我们想象的那样。

首先要记住,**手机物理像素不等于PC端浏览器分辨率**。作为Web开发者，我们整天在CSS里用`px`作为长度单位。这里的`px`指的是`CSS像素`。浏览器里的一切长度都是以CSS像素为单位的。在非高清屏幕以及未缩放浏览器的情况下，一个CSS像素等于一个物理像素。而在搭载了高清屏幕（PPI特别高，一个屏幕上的物理像素点非常多）的设备上，如果一个CSS像素仍等于一个物理像素，那么网页上的各种元素就变得非常小，用户很难看清，因此高**PPI**的设备中，一个CSS像素通常等于两个甚至三个物理像素。

上面提及的**PPI（Pixel per inch）**译名为**每英寸像素取值**，意思是**每一英寸内的物理像素数量**，计算公式为：
![PPI公式](/img/in-post/post-responsive/responsive-1708_1.jpg)

#### 视口（viewport）

讲述了设备的物理像素和CSS像素的区别后，我们说一个更重要的概念：[视口](http://mp.weixin.qq.com/s?__biz=MzA5NTM2MTEzNw==&mid=388124021&idx=1&sn=175ee9b47b17dde0f30f6c42130ed5e2&scene=2&srcid=10014LSu0sE98eaP14RHzaMw&from=timeline&isappinstalled=0#rd)，视口在CSS里的定义是<html>元素的**包含块**，称为**初始包含块**。他的宽度是**所有CSS百分比宽度推算的根源**。

**在PC桌面上，视口的宽度等同于浏览器窗口的宽度，高度即为浏览器窗口的高度**。而浏览器宽度通常为240px--640px像素的移动设备上也这样设定的话，这会很不方便。为了适应为桌面浏览器设计的网站，浏览器出现了**布局视口概念**。与桌面浏览器不同的是，浏览器默认的**布局视口宽度与浏览器宽度完全独立**。通常是`768px`~`1024px`，最常见的是`980px`。这里使用的是px单位，说明这些是CSS像素不是移动设备的物理像素，因此“屏幕尺寸”的定义与设备屏幕的分辨率无关。实际上，这里的尺寸指的是浏览器的布局视口大小。

可以在mete标签内指定一个布局视口尺寸，而不是使用默认的980px尺寸：

```html
    
    <meta name="viewport" content="width=320">

```

然而一般我们都不指定具体宽度而是做如下设置：

```html
    
    <meta name="viewport" content="width=device-width，initial-scale=1">

```

这里的`device-width`告诉浏览器，将布局视口的宽度设置为设备最理想的宽度。不同的设备有不同的理想宽度（同一设备的不同浏览器也有可能拥有不同的理想宽度，尽管这种现象极为极为罕见），且随着设备的横放竖放也会有所改变，因此通常不指定特定的尺寸，而是使用device-width进行自适应。宽度为理想宽度的布局视口叫做**“理想视口”**。

**媒体查询中，min-width、max-width的查询即是对布局视口宽度的查询**。因此若想通过媒体查询来实现响应式设计，应当设置一个设备的布局视口宽度或是使其自适应到理想宽度，否则移动浏览器使用默认布局视口宽度（大都是980px）会使针对视口宽度的媒体查询无功而返。


#### 样式表引入

我们最常见的引入样式表的方式就是在头标签内使用`link`引用外部CSS文件。在进行响应式设计的时候一种方式是创建多个样式表，以适应不同设备类型的宽度范围。这样的分开引入的方式易于后期维护。

```html
    
<link rel="stylesheet" type="text/css" media="screen and (max-width: 480px)" href="style-m-480.css" />
<link rel="stylesheet" type="text/css" media="screen and (min-width: 481px)" href="style-l-481.css" />

```
通过媒体查询（media queries）来指定特定的媒体类型，如屏幕（screen）和打印（print）等的样式表。上述第一行`media`语句表示的是当页页宽度小于或等于480px,调用style-m-480.css样式表来渲染你的Web页面。

更有效率的做法是，将多个`media queries`整合在一个样式表文件中：

```css
    
    /* 屏幕宽度在320-480像素之间时调用的样式 */
    @media screen and (min-width : 320px) and (max-width : 480px) 
    {     
        .test {
            color:yellow;
         }
    }
    /* 屏幕宽度在大于480像素之间时调用的样式 */
    @media screen and (min-width : 480px)
    {
         .test {
            color:red;
         }
    }

    /* 屏幕宽度在小于320像素之间时调用的样式 */
    @media screen and (max-width : 320px) 
    {
         .test {
            color:green;
         }
    }

```

在一个样式表内我们使用的是将多个`media queries`整合在表中进行编码的句法。如上文所述，这样做更加高效，减少请求数量。

有些时候，我们希望通过`media queries`作用于某种特定的设备，而忽略其上运行的浏览器是否由于没有最大化而在尺寸上与设备屏幕尺寸产生不一致的情况。这时，我们需要使用`min-device-width`与`max-device-width`，用来判断设备本身的屏幕尺寸。

#### 字体的选择

对于字体的选择会在**有衬线字体**和**无衬线字体**之间，所谓衬线就是在字的笔画开始及结束的地方有额外的装饰，而且笔画的粗细会因直横的不同而有不同。相反的，无衬线就没有这些额外装饰，而且笔画粗细大致上是差不多。这本身是一个很复杂的问题,如果你选择大于12号的字体，有衬线和无衬线字体可以表现得一样好。小于12号的有衬线字体渲染得不够锐利，但是在现代的显示器上，12号字体绝对太小了。

![有衬线字体和无衬线字体的区别](/img/in-post/post-responsive/responsive-1708_2.png)

正文字体的尺寸不是取决于你自己的个人喜好，它取决于阅读距离。因为一般的屏幕离人会比书本远一点，台式机字体的大小要比印刷的大一些。同理于行高。

因此不同的设备对字体的设定也是有所不同，例如iPhone和iPad，我们在使用iPad的时候，眼睛与屏幕的距离往往要大于iPhone。iPhone上显示的屏幕更小，所以你需要集中来调整，幸运的是，iPhone会被放在面前很近的距离来操作，所以要用很小的文字尺寸来完美运行。


#### 设计提速

研究发现 ，如果3秒之内无法载入页面，一半的用户会选择离开。响应式网站相对于传统网站需要载入的东西更多，所以更需要优化。为了提高表现力，我们需要减少页面的资源的数量，缩小页面的尺寸。并不是必须调整页面的外观，通过一些工具和手段也能实现”瘦身”。

首先要考虑的就是哪些元素是必要的，哪些是不必要的，去掉不必要的元素，这样就能最小化HTTP请求，这样用户的等待加载的耗时也最少。这可以通过压缩CSS和JS来实现，推荐一款叫做`Compass`的工具——开源的CSS框架编写工具，可以配合`sass`一起使用。而JavaScript推荐一款工具叫UglifyJS，可以压缩代码，对有大量图片的网站来说，过多的http请求对于网站来说无疑是个灾难，可以是使用**CSS Sprites**,将图片整合成一张大图片，通过定位的方式来取得某张小图片。

有选择性的载入也是可以考虑采用的重要手段，非常适用于响应式设计的提速，这样就能确保手机用户不会下载那些会降低载入速度的元素。
有选择性的载入，能够阻拦各种内容的载入，包括社交窗口、图像、地图，以及其他。再采用这种手段之前，最好对网站进行全面的测试，先要了解是哪方面降低了网页的载入速度，这样对症下药，效果才能更好。

我们都知道图像在网页中占据了大量的字节。一般在手机上的图像表现力要比桌面上的差。如果网站内容很多，便会影响到载入速度，因此就需要截断一部分内容，这样就能够提高载入速度，用户一边往下拉，一边跟着载入，这样同步于用户，体验就会很好。

#### 
## 结尾

啊，希望自己能成为海贼王吧。